vec_out <- append(vec_out, X)
}
plot(vec_out, type = "line",  ylim = c(-1.5, 1.5))
abline(h=1, col="blue")
abline(h=-1, col="red")
X = 0
cont = 0
vec_out = c()
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
plot(vec_out, type = "line",  ylim = c(-1.5, 1.5))
abline(h=1, col="blue")
abline(h=-1, col="red")
X = 0
cont = 0
vec_out = c()
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
plot(vec_out, type = "line",  ylim = c(-1.5, 1.5))
abline(h=1, col="blue")
abline(h=-1, col="red")
X = 0
cont = 0
vec_out = c()
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
plot(vec_out, type = "line",  ylim = c(-1.5, 1.5))
abline(h=1, col="blue")
abline(h=-1, col="red")
library(tidyverse)
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = vec_out))
})
plot(vec_out, type = "line",  ylim = c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(vec_out)
})
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = vec_out))
})
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out))
})
library(ggplot2)
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
})
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys
)) +
geom_point()
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_point() +
geom_line()
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line()
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red")
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:300){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:300){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:300))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line() +
stat_summary(fun.data = "mean_se", geom = "line", color = "black", size = 1.5) +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run
)) +
geom_line() +
stat_summary(fun.data = "mean_se", geom = "line", color = "black", size = 1.5, group = 1) +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
}) %>%
ggplot(aes(
xs, ys, group = run, color = if_else(tail(ys,1) >= 1, "blue", "red")
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100))
})
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100) %>%
group_by(run) %>%
mutate(s = if_else(tail(ys, 1) >= 1, "pos", "neg")))
})
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100) %>%
group_by(run) %>%
mutate(s = if_else(tail(ys, 1) >= 1, "pos", "neg")))
}) %>%
ggplot(aes(
xs, ys, group = run, color = s
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100) %>%
group_by(run) %>%
mutate(s = case_when(
tail(ys, 1) >= 1 ~ "pos",
tail(ys, 1) <= -1 ~ "neg",
TRUE ~ "neutral"
)))
}) %>%
ggplot(aes(
xs, ys, group = run, color = s
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-1.5, 1.5))
X = 0
cont = 0
vec_out = c()
1:100 %>%
map_dfr(., function(x){
for (i in 1:100){
X = X + (-0.08 * -10 + 0.08 * 10) * 0.008 + (rnorm(1, mean = 0, sd = 0.1))
vec_out <- append(vec_out, X)
}
return(tibble(run = x, ys = vec_out, xs = 1:100) %>%
group_by(run) %>%
mutate(s = case_when(
tail(ys, 1) >= 1 ~ "pos",
tail(ys, 1) <= -1 ~ "neg",
TRUE ~ "neutral"
)))
}) %>%
ggplot(aes(
xs, ys, group = run, color = s
)) +
geom_line() +
geom_hline(yintercept = 1, color = "blue") +
geom_hline(yintercept = -1, color = "red") +
ylim(c(-3,3))
pacman::p_load(
tidyverse,
ggplot2,
DEoptim,
Rcpp,
plyr,
parallel,
pbmcapply
)
# https://stackoverflow.com/questions/47044068/get-the-path-of-current-script
# get path of source file
getCurrentFileLocation <-  function()
{
this_file <- commandArgs() %>%
tibble::enframe(name = NULL) %>%
tidyr::separate(col=value, into=c("key", "value"), sep="=", fill='right') %>%
dplyr::filter(key == "--file") %>%
dplyr::pull(value)
if (length(this_file)==0)
{
this_file <- rstudioapi::getSourceEditorContext()$path
}
return(dirname(this_file))
}
# sets path on source file location
script_path <- getCurrentFileLocation()
setwd(script_path)
RcppParallel::setThreadOptions(numThreads = 1) #this is critical for running on Mac OS for some reason.
### --- how to run the tDDM:
# load the c++ file containing the functions to simulate the time-varying DDM
sourceCpp("tSSM_Rcpp.cpp")
# read in behavioral data from HEALTH cue only
dataBeh <- read_csv("filtered_data_for_DDM_with_health_as_reference.csv") %>%
dplyr::rename(
td = dTaste,
hd = dHealth,
rt = RT
) %>%
mutate(
label = paste(ID, context, sep = "_"),
subID = as.numeric(as.factor(label)),
rt = rt / 1000 # use second instead of ms
)
View(dataBeh)
# read in behavioral data from HEALTH cue only
# this csv contains health and taste difference computed as healthy option - unhealthy options
# when both options were rated equally they were removed
# healthy option is the one with highest health rating
dataBeh <- read_csv("filtered_data_for_DDM_with_health_as_reference.csv") %>%
dplyr::rename(
td = dTaste,
hd = dHealth,
rt = RT
) %>%
mutate(
label = paste(ID, context, sep = "_"),
subID = as.numeric(as.factor(label)),
rt = rt / 1000 # use second instead of ms
)
dataBeh$abstd = abs(dataBeh$td)
dataBeh$abshd = abs(dataBeh$hd)
dataBeh$logRT = log(dataBeh$rt)
# assign negative RTs to unhealthy option
dataBeh <- dataBeh %>%
mutate(
choseL = if_else(sub_healthy_choice == "healthy", 1, 0),
RTddm = if_else(choseL == 0, rt * -1, rt) # if unhealthy is choosen then rt is negative
)
ntrials = length(dataBeh$rt)
# just to make sure, plot the RT distributions (with positive and negative sign)
hist(dataBeh$RTddm)  # ~-4 to 4 with significant number of observations
range(dataBeh$RTddm) # -4.5 to 4.6
xpos = seq(-5,5,length.out=1024) # this is then OK
dt = xpos[2] - xpos[1]
dataBeh$RTddm_pos = 0
# gets the probability within the pdf
for (i in 1:ntrials) {
dataBeh$RTddm_pos[i] = which.min(abs(xpos - dataBeh$RTddm[i]))
}
ll_ddm2 <- function(x, dataBeh2, vd, hd) {
d_v = x[1] # weighting for attribute 1 (here: taste)
d_h = x[2] # weighting for attribute 2 (here: health)
thres = x[3] # threshold
nDT = x[4] # non-decision time
tHin = x[5] # time Health in (relative start time of health vs. taste)
bias = x[6] # starting point bias
probs = NULL
for (i in 1:length(vd)) {
rts = ddm2_parallel(d_v,d_h,thres,nDT,tHin,bias,vd[i],hd[i],3000) # 3000 is the number of simulated RTs
rts = rts[rts!=0]
xdens = density(rts, from=-5, to=5, n=1024, bw=0.11) #matches the prob. space of RTs from above
idx = which(dataBeh2$td==vd[i] & dataBeh2$hd==hd[i])
# this is a vector of probabilities for all trial with same taste and health difference
probs = c(probs, dt*xdens$y[dataBeh2$RTddm_pos[idx]])
}
probs[probs==0] = 1e-100
return (-sum(log(probs)))
}
hist(dataBeh$td)
hist(dataBeh$hd)
hist(dataBeh$bin_health)
hist(dataBeh$bin_taste)
ddply(dataBeh, .(td, hd), summarize, acc = mean(choseL))
dataBeh$bin_health
fitSub <- function(s, dataBeh) {
fits=matrix(0,1,9)
idx = which(dataBeh$subID==s)
dataBeh2 = dataBeh[idx,]
label <- unique(dataBeh2$label)
cat(NULL,file=paste0(label, ".csv"))
#data1 = ddply(dataBeh2, .(td, hd), summarize, acc= mean(choseL))
# td and hd were changes to 10 equally spaced bins
# this should reduce computation time
data1 = ddply(dataBeh2, .(bin_taste, bin_health), summarize, acc= mean(choseL))
#vd = data1$td # value difference for attribute 1 (here: taste)
#hd = data1$hd # value difference for attribute 2 (here: health)
# binned differences for taste and health
vd = data1$bin_taste
hd = data1$bin_health
# boundaries for parameters
lower <- c(-2,-2,0.6,0.01,-1,-1)
upper <- c(2,2,3,1,1,1)
fit_s = DEoptim(ll_ddm2, lower, upper, DEoptim.control(itermax = 150), dataBeh2=dataBeh2, vd=vd, hd=hd)
fits[1,1:6] = fit_s$optim$bestmem #fitted parameters
fits[1,7] = fit_s$optim$bestval #LL
fits[1,8] = 2*fit_s$optim$bestval + length(lower)*log(length(vd)) #BIC
fits[1,9] = 2*fit_s$optim$bestval + 2*length(lower) # AIC
# write to csv subject_context
f = as.data.frame(matrix(unlist(fits),ncol=9,byrow=TRUE))
names(f)<-c("d_t", "d_h", "thres", "nDT", "timeHin", "bias", "LL", "BIC", "AIC")
write_csv(f, paste0(label, ".csv"))
return(fits)
}
inputs = 1:length(unique(dataBeh$subID))
numCores <- detectCores()
ddply(dataBeh, .(bin_taste, bin_health), summarize, acc= mean(choseL))
