eval_f = likelihood_estimation,
lb = c(0, 0),
ub = c(1, 10),
opts = opts,
actions = data$actions,
rewards = data$reward
)
out <-
tibble(
replicate = i,
ID = ID,
drug = drug,
total_entropy = total_entropy,
alpha = non_linear_opt0$solution[1],
beta = non_linear_opt0$solution[2],
log_lik = non_linear_opt0$objective
)
return(out)
}, NA))
return(non_linear_opt_replicates)
})
# get best fits
# remove log likelihood of 0, shows that parameter could not be estimated
# probably because of small sample size
fits <-
bind_rows(individual_data_fit) %>%
pivot_longer(
cols = c(alpha, beta),
values_to = "estimates",
names_to = "parameter"
) %>%
group_by(ID, drug, total_entropy, parameter) %>%
slice(which.min(log_lik)) %>%
filter(log_lik != 0)
fits
fits %>%
ggplot(aes(
interaction(drug, total_entropy), (estimates), color = interaction(drug, total_entropy)
)) +
stat_summary(
fun.data = "mean_se",
geom = "point",
size = 4,
shape = 15
) +
stat_summary(
fun.data = "mean_se",
geom = "errorbar",
width = 0.2
) +
geom_point() +
geom_line(aes(group = ID)) +
facet_wrap(~parameter * total_entropy, scales = "free")
mdl <-
lmer(
data = fits %>% filter(parameter == "alpha"),
estimates ~ drug + (1 | ID)
)
summary(mdl)
mdl <-
lmer(
data = fits %>% filter(parameter == "alpha"),
estimates ~ drug + (1 + total_entropy | ID)
)
summary(mdl)
mdl <-
lmer(
data = fits %>% filter(parameter == "alpha"),
estimates ~ drug * total_entropy + (1 | ID)
)
summary(mdl)
mdl <-
lmer(
data = fits %>% filter(parameter == "beta"),
estimates ~ drug * total_entropy + (1 | ID)
)
summary(mdl)
mdl <-
lmer(
data = fits %>% filter(parameter == "beta"),
estimates ~ drug * total_entropy + (1 | ID/total_entropy)
)
summary(mdl)
mdl <-
lmer(
data = fits %>% filter(parameter == "beta"),
estimates ~ drug  + (1 | ID/total_entropy)
)
summary(mdl)
fits
mdl <-
lmer(
data = fits %>% filter(parameter == "beta", ID != "574"),
estimates ~ drug  + (1 | ID/total_entropy)
)
summary(mdl)
mdl <-
lmer(
data = fits %>% filter(parameter == "beta"),
estimates ~ drug  + (1 | ID/total_entropy)
)
summary(mdl)
mdl <-
lmer(
data = fits %>% filter(parameter == "alpha"),
estimates ~ drug  + (1 | ID/total_entropy)
)
summary(mdl)
fits %>%
ggplot(aes(
interaction(drug, total_entropy), (estimates)
)) +
stat_summary(
fun.data = "mean_se",
geom = "point",
size = 4,
shape = 15
) +
stat_summary(
fun.data = "mean_se",
geom = "errorbar",
width = 0.2
) +
geom_point() +
geom_line(aes(group = ID)) +
facet_wrap(~parameter * total_entropy, scales = "free")
fits
fit_veh_rel <-
fits %>%
group_by(ID, total_entropy, parameter) %>%
mutate(
rel_param = estimates - estimates[drug == "veh"]
)
View(individual_data)
fit_veh_rel <-
fits %>%
filter(ID != 576) %>%
group_by(ID, total_entropy, parameter) %>%
mutate(
rel_param = estimates - estimates[drug == "veh"]
)
individual_data_fit <-
individual_data %>%
map(., function(df){
# individual subject either with tcs or veh
drug <- unique(df$droga)
ID <- unique(df$ID)
total_entropy <- unique(df$total_entropy)
data <- df %>%
ungroup() %>%
select(trial, actions, reward)
# replicate to avoid local optima
non_linear_opt_replicates <-
1:1 %>%
map_dfr(., purrr::possibly(function(i){
non_linear_opt0 <-
nloptr(
x0 = c(runif(min=0, max=1, n = 1), runif(min=0, max=100, n = 1)),
eval_f = likelihood_estimation,
lb = c(0, 0),
ub = c(1, Inf),
opts = opts,
actions = data$actions,
rewards = data$reward
)
out <-
tibble(
replicate = i,
ID = ID,
drug = drug,
total_entropy = total_entropy,
alpha = non_linear_opt0$solution[1],
beta = non_linear_opt0$solution[2],
log_lik = non_linear_opt0$objective
)
return(out)
}, NA))
return(non_linear_opt_replicates)
})
fits
# get best fits
# remove log likelihood of 0, shows that parameter could not be estimated
# probably because of small sample size
fits <-
bind_rows(individual_data_fit) %>%
pivot_longer(
cols = c(alpha, beta),
values_to = "estimates",
names_to = "parameter"
) %>%
group_by(ID, drug, total_entropy, parameter) %>%
slice(which.min(log_lik))
fits
fit_veh_rel <-
fits %>%
group_by(ID, total_entropy, parameter) %>%
mutate(
rel_param = estimates - estimates[drug == "veh"]
)
fit_veh_rel <-
fits %>%
filter(ID != "577") %>%
group_by(ID, total_entropy, parameter) %>%
mutate(
rel_param = estimates - estimates[drug == "veh"]
)
fit_veh_rel
fit_veh_rel %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
geom_point()
fit_veh_rel %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_se",
geom = "col"
)
fit_veh_rel %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_se",
geom = "bar"
)
fit_veh_rel %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_se",
geom = "bar"
) +
facet_wrap(~parameter, scales = "free")
fit_veh_rel
fit_veh_rel %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_se",
geom = "bar"
) +
stat_summary(
fun.data = "mean_se",
geom = "errorbar"
) +
facet_wrap(~parameter, scales = "free")
fit_veh_rel %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_se",
geom = "bar"
) +
stat_summary(
fun.data = "mean_se",
geom = "errorbar",
width = 0.2
) +
facet_wrap(~parameter, scales = "free")
fit_veh_rel %>%
filter(drug != "veh") %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_se",
geom = "bar"
) +
stat_summary(
fun.data = "mean_se",
geom = "errorbar",
width = 0.2
) +
facet_wrap(~parameter, scales = "free")
fit_veh_rel %>%
filter(drug != "veh") %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "bar"
) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "errorbar",
width = 0.2
) +
facet_wrap(~parameter, scales = "free")
fit_veh_rel %>%
filter(drug != "veh") %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "bar"
) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "errorbar",
width = 0.2
) +
theme(
text = element_text(size =30)
) +
facet_wrap(~parameter, scales = "free")
fit_veh_rel %>%
filter(drug != "veh") %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "bar"
) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "errorbar",
width = 0.2
) +
theme(
text = element_text(size =30)
) +
ylab("tcs - veh") +
xlab("") +
facet_wrap(~parameter, scales = "free")
fit_veh_rel %>%
filter(drug != "veh") %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "errorbar",
width = 0.2
) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "bar"
) +
theme(
text = element_text(size =30)
) +
ylab("tcs - veh") +
xlab("") +
facet_wrap(~parameter, scales = "free")
fits %>%
ggplot(aes(
interaction(drug, total_entropy), (estimates)
)) +
stat_summary(
fun.data = "mean_se",
geom = "point",
size = 4,
shape = 15
) +
stat_summary(
fun.data = "mean_se",
geom = "errorbar",
width = 0.2
) +
geom_point() +
geom_line(aes(group = ID)) +
facet_wrap(~parameter * total_entropy, scales = "free")
mdl <-
lmer(
data = fits %>% filter(parameter == "alpha"),
estimates ~ drug  + (1 | ID/total_entropy)
)
fit_veh_rel %>%
filter(drug != "veh") %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "errorbar",
width = 0.2
) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "bar"
) +
theme(
text = element_text(size =30)
) +
ylab("tcs - veh") +
xlab("") +
facet_wrap(~parameter*total_entropy, scales = "free")
individual_data_fit <-
individual_data %>%
map(., function(df){
# individual subject either with tcs or veh
drug <- unique(df$droga)
ID <- unique(df$ID)
total_entropy <- unique(df$total_entropy)
data <- df %>%
ungroup() %>%
select(trial, actions, reward)
# replicate to avoid local optima
non_linear_opt_replicates <-
1:100 %>%
map_dfr(., purrr::possibly(function(i){
non_linear_opt0 <-
nloptr(
x0 = c(runif(min=0, max=1, n = 1), runif(min=0, max=100, n = 1)),
eval_f = likelihood_estimation,
lb = c(0, 0),
ub = c(1, Inf),
opts = opts,
actions = data$actions,
rewards = data$reward
)
out <-
tibble(
replicate = i,
ID = ID,
drug = drug,
total_entropy = total_entropy,
alpha = non_linear_opt0$solution[1],
beta = non_linear_opt0$solution[2],
log_lik = non_linear_opt0$objective
)
return(out)
}, NA))
return(non_linear_opt_replicates)
})
individual_data_fit <-
individual_data %>%
map(., function(df){
# individual subject either with tcs or veh
drug <- unique(df$droga)
ID <- unique(df$ID)
total_entropy <- unique(df$total_entropy)
data <- df %>%
ungroup() %>%
select(trial, actions, reward)
# replicate to avoid local optima
non_linear_opt_replicates <-
1:100 %>%
map_dfr(., purrr::possibly(function(i){
non_linear_opt0 <-
nloptr(
x0 = c(runif(min=0, max=1, n = 1), runif(min=0, max=200, n = 1)),
eval_f = likelihood_estimation,
lb = c(0, 0),
ub = c(1, Inf),
opts = opts,
actions = data$actions,
rewards = data$reward
)
out <-
tibble(
replicate = i,
ID = ID,
drug = drug,
total_entropy = total_entropy,
alpha = non_linear_opt0$solution[1],
beta = non_linear_opt0$solution[2],
log_lik = non_linear_opt0$objective
)
return(out)
}, NA))
return(non_linear_opt_replicates)
})
# get best fits
# remove log likelihood of 0, shows that parameter could not be estimated
# probably because of small sample size
fits <-
bind_rows(individual_data_fit) %>%
pivot_longer(
cols = c(alpha, beta),
values_to = "estimates",
names_to = "parameter"
) %>%
group_by(ID, drug, total_entropy, parameter) %>%
slice(which.min(log_lik))
fits
fit_veh_rel <-
fits %>%
filter(ID != "577") %>%
group_by(ID, total_entropy, parameter) %>%
mutate(
rel_param = estimates - estimates[drug == "veh"]
)
fit_veh_rel %>%
filter(drug != "veh") %>%
ggplot(aes(
interaction(drug, total_entropy), rel_param
)) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "errorbar",
width = 0.2
) +
stat_summary(
fun.data = "mean_cl_boot",
geom = "bar"
) +
theme(
text = element_text(size =30)
) +
ylab("tcs - veh") +
xlab("") +
facet_wrap(~parameter, scales = "free")
